Here's Scenario One from the p00 assignment to help you get started:
Scenario One: Collaborative Storytelling Game/Website
Your team has been contracted to create a collaborative storytelling game/website with the following features:
User Registration: Users must register to use the site.
Starting a New Story:
Logged-in users can start a new story with any amount of text and give the story a title.
Adding to an Existing Story:
Logged-in users can add to an existing story but only see the latest update, not the entire story.
Users can only add to a story once.
Viewing Stories:
Logged-in users can view any story they have contributed to on their homepage after logging in.
Additional Requirements
Design Document: Before implementation, create a design document detailing program components, their roles, database organization, site map, and task breakdown.
Technology Stack:
Backend: Flask for the web server, SQLite3 for data storage.
Frontend: Use CSS for styling, ensuring functionality remains without CSS.
Development: Use multiple Python files for application layers and maintain a devlog.
Project Guidelines
Devlog: Maintain a devlog to track project status, changes, and bugs.
Final Deliverables: Include a design document, devlog, project structure, and a README with project name, team roles, description, installation guide, and launch codes.
You can view the full assignment details here.
Write the code for it
Based on Scenario One from the p00 assignment, I will provide a basic structure of the required code. This will include user registration, login, creating new stories, and adding to existing stories using Flask and SQLite.
Directory Structure
Code
app/
    __init__.py
    static/
        css/          (optional)
    templates/
        base.html
        login.html
        register.html
        home.html
        new_story.html
        add_story.html
design.pdf
devlog.txt
flag.jpg
README.md
requirements.txt
Public code references from 5 repositories










app/__init__.py
Python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.login_message_category = 'info'

from app import routes
Public code references from 1 repository


1 vulnerability detected


app/models.py
Python
from datetime import datetime
from app import db, login_manager
from flask_login import UserMixin

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default='default.jpg')
    password = db.Column(db.String(60), nullable=False)
    stories = db.relationship('Story', backref='author', lazy=True)
    contributions = db.relationship('Contribution', backref='contributor', lazy=True)

class Story(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    contributions = db.relationship('Contribution', backref='story', lazy=True)

class Contribution(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    story_id = db.Column(db.Integer, db.ForeignKey('story.id'), nullable=False)
Public code references from 11 repositories






















app/forms.py
Python
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, TextAreaField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError
from app.models import User

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('That username is taken. Please choose a different one.')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('That email is already in use. Please choose a different one.')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class StoryForm(FlaskForm):
    title = StringField('Title', validators=[DataRequired()])
    content = TextAreaField('Content', validators=[DataRequired()])
    submit = SubmitField('Create Story')

class ContributionForm(FlaskForm):
    content = TextAreaField('Content', validators=[DataRequired()])
    submit = SubmitField('Add to Story')
Public code references from 16 repositories

Please rewrite all the code to not use SQLAlchemy
Rewriting the Code to Not Use SQLAlchemy
We will replace SQLAlchemy with raw SQLite database operations using the sqlite3 module in Python.

Updated app/__init__.py
Python
import sqlite3
from flask import Flask, render_template, url_for, flash, redirect, request
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, current_user, logout_user, login_required
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, TextAreaField
from wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError
from datetime import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.login_message_category = 'info'

# Database setup
def get_db_connection():
    conn = sqlite3.connect('site.db')
    conn.row_factory = sqlite3.Row
    return conn

@login_manager.user_loader
def load_user(user_id):
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM user WHERE id = ?', (user_id,)).fetchone()
    conn.close()
    return User(user['id'], user['username'], user['email'], user['image_file'], user['password']) if user else None

class User(UserMixin):
    def __init__(self, id, username, email, image_file, password):
        self.id = id
        self.username = username
        self.email = email
        self.image_file = image_file
        self.password = password

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')

    def validate_username(self, username):
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM user WHERE username = ?', (username.data,)).fetchone()
        conn.close()
        if user:
            raise ValidationError('That username is taken. Please choose a different one.')

    def validate_email(self, email):
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM user WHERE email = ?', (email.data,)).fetchone()
        conn.close()
        if user:
            raise ValidationError('That email is already in use. Please choose a different one.')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class StoryForm(FlaskForm):
    title = StringField('Title', validators=[DataRequired()])
    content = TextAreaField('Content', validators=[DataRequired()])
    submit = SubmitField('Create Story')

class ContributionForm(FlaskForm):
    content = TextAreaField('Content', validators=[DataRequired()])
    submit = SubmitField('Add to Story')

@app.route("/")
@app.route("/home")
@login_required
def home():
    conn = get_db_connection()
    stories = conn.execute('SELECT * FROM story').fetchall()
    conn.close()
    return render_template('home.html', stories=stories)

@app.route("/register", methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        conn = get_db_connection()
        conn.execute('INSERT INTO user (username, email, password, image_file) VALUES (?, ?, ?, ?)',
                     (form.username.data, form.email.data, hashed_password, 'default.jpg'))
        conn.commit()
        conn.close()
        flash('Your account has been created! You are now able to log in', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)

@app.route("/login", methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = LoginForm()
    if form.validate_on_submit():
        conn = get_db_connection()
        user = conn.execute('SELECT * FROM user WHERE email = ?', (form.email.data,)).fetchone()
        conn.close()
        if user and bcrypt.check_password_hash(user['password'], form.password.data):
            login_user(User(user['id'], user['username'], user['email'], user['image_file'], user['password']))
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('home'))
        else:
            flash('Login Unsuccessful. Please check email and password', 'danger')
    return render_template('login.html', title='Login', form=form)

@app.route("/logout")
def logout():
    logout_user()
    return redirect(url_for('home'))

@app.route("/story/new", methods=['GET', 'POST'])
@login_required
def new_story():
    form = StoryForm()
    if form.validate_on_submit():
        conn = get_db_connection()
        conn.execute('INSERT INTO story (title, content, user_id, date_posted) VALUES (?, ?, ?, ?)',
                     (form.title.data, form.content.data, current_user.id, datetime.utcnow()))
        conn.commit()
        conn.close()
        flash('Your story has been created!', 'success')
        return redirect(url_for('home'))
    return render_template('new_story.html', title='New Story', form=form)

@app.route("/story/<int:story_id>", methods=['GET', 'POST'])
@login_required
def add_story(story_id):
    conn = get_db_connection()
    story = conn.execute('SELECT * FROM story WHERE id = ?', (story_id,)).fetchone()
    conn.close()
    if not story:
        return redirect(url_for('home'))
    form = ContributionForm()
    if form.validate_on_submit():
        conn = get_db_connection()
        conn.execute('INSERT INTO contribution (content, user_id, story_id, date_posted) VALUES (?, ?, ?, ?)',
                     (form.content.data, current_user.id, story_id, datetime.utcnow()))
        conn.commit()
        conn.close()
        flash('Your contribution has been added!', 'success')
        return redirect(url_for('home'))
    return render_template('add_story.html', title='Add to Story', form=form, story=story)
 Public code references from 13 repositories
 1 vulnerability detected
Database Schema
You will need to create the database schema manually. Below is an example of how to create the tables using SQLite:

SQL
-- Create user table
CREATE TABLE user (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    email TEXT NOT NULL UNIQUE,
    image_file TEXT NOT NULL DEFAULT 'default.jpg',
    password TEXT NOT NULL
);

-- Create story table
CREATE TABLE story (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    date_posted TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    content TEXT NOT NULL,
    user_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES user (id)
);

-- Create contribution table
CREATE TABLE contribution (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    content TEXT NOT NULL,
    date_posted TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_id INTEGER NOT NULL,
    story_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES user (id),
    FOREIGN KEY (story_id) REFERENCES story (id)
);
Update requirements.txt
Remove Flask-SQLAlchemy from requirements.txt as it is no longer needed.

plaintext
Flask==2.0.1
Flask-Bcrypt==0.7.1
Flask-Login==0.5.0
Flask-WTF==0.14.3
Instructions
Run the SQL commands to create the database schema.
Replace the code in app/__init__.py with the provided code.
Update your requirements.txt and reinstall the dependencies.
This should replace the usage of SQLAlchemy with raw SQLite operations. Let me know if you need further assistance!
